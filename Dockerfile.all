ARG L4T_MINOR_VERSION
ARG ZED_SDK_MAJOR
ARG ZED_SDK_MINOR
ARG JETPACK_MAJOR
ARG JETPACK_MINOR

# https://catalog.ngc.nvidia.com/orgs/nvidia/containers/l4t-base/tags
FROM nvcr.io/nvidia/l4t-base:r32.${L4T_MINOR_VERSION}.1

COPY packages/usr /usr

RUN printenv && \
    ls -ll /usr/lib/aarch64-linux-gnu/tegra && \
    ls -ll /usr/lib/aarch64-linux-gnu/libnv* && \
    ls -ll /usr/lib/aarch64-linux-gnu/libnv* && \
    ldd /usr/lib/aarch64-linux-gnu/libnvinfer.so 
# After using an arg in a `FROM` line, the arg is lo

#This environment variable is needed to use the streaming features on Jetson inside a container
ENV LOGNAME root

# Source: https://github.com/dusty-nv/jetson-containers/blob/master/Dockerfile.ml
# Source: https://github.com/zauberzeug/l4t-opencv/blob/main/Dockerfile
ENV DEBIAN_FRONTEND=noninteractive
ENV CUDA_HOME="/usr/local/cuda"
ENV PATH="/usr/local/cuda/bin:${PATH}"
ENV LD_LIBRARY_PATH="/usr/local/cuda/lib64:${LD_LIBRARY_PATH}"
ENV LLVM_CONFIG="/usr/bin/llvm-config-9"

ENV TZ=Asia/Tokyo
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone


#Install dependencies
RUN apt-get update -y && apt-get install -y sudo apt-utils apt-transport-https lsb-release udev usbutils git 

#Install ZED SDK
# protobuf requires Python '>=3.7' but the running Python is 3.6.
# Note: for protobuf version: https://pypi.org/project/protobuf/#history
RUN apt-get update -y && apt-get install -y --no-install-recommends wget less cmake curl gnupg2 \
    build-essential python3 python3-pip python3-dev python3-setuptools libusb-1.0-0-dev -y && \
    python3 -m pip install "protobuf>=3.11.0,<=3.20.1" && \
    echo "# R32 (release), REVISION: ${L4T_MINOR_VERSION}" > /etc/nv_tegra_release ; \
    wget -q --no-check-certificate https://download.stereolabs.com/zedsdk/${ZED_SDK_MAJOR}.${ZED_SDK_MINOR}/jp${JETPACK_MAJOR}${JETPACK_MINOR}/jetsons && \
    chmod +x jetsons ; ./jetsons silent skip_tools && \
    rm -rf /usr/local/zed/resources/* && \
    rm -rf ZED_SDK_Linux_JP.run && \
    rm -rf /var/lib/apt/lists/*

#This symbolic link is needed to use the streaming features on Jetson inside a container
#RUN ln -sf /usr/lib/aarch64-linux-gnu/tegra/libv4l2.so.0 /usr/lib/aarch64-linux-gnu/libv4l2.so


# OpenCV Version 
ARG OPENCV_VERSION

# Install dependencies
RUN apt-get update || true && apt-get upgrade -y && \
    # Install build tools, build dependencies and python
    apt-get install --no-install-recommends -y \
	build-essential gcc g++ \
	cmake git vim libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev \
	libopenblas-dev liblapack-dev libblas-dev libhdf5-serial-dev hdf5-tools libhdf5-dev zip \
	libv4l-dev v4l-utils qv4l2 v4l2ucp libdc1394-22-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
	libopenmpi2 openmpi-bin openmpi-common protobuf-compiler libprotoc-dev llvm-9 llvm-9-dev \
	libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev \
    yasm libatlas-base-dev gfortran libpq-dev \
    libxine2-dev libglew-dev libtiff5-dev zlib1g-dev libavutil-dev libpostproc-dev \ 
    libeigen3-dev python3-dev python3-pip python3-numpy libx11-dev tzdata \
&& rm -rf /var/lib/apt/lists/*

#This symbolic link is needed to use the streaming features on Jetson inside a container
RUN printenv && \
    ln -sf /usr/lib/aarch64-linux-gnu/tegra/libv4l2.so.0 /usr/lib/aarch64-linux-gnu/libv4l2.so && \
	ln -sf /usr/bin/python3.6 /usr/bin/python3 && \
	ln -sf /usr/bin/python3.6 /usr/bin/python

# Set Working directory
WORKDIR /opt

# Install OpenCV from Source
RUN git clone --depth 1 --branch ${OPENCV_VERSION} https://github.com/opencv/opencv.git && \
    git clone --depth 1 --branch ${OPENCV_VERSION} https://github.com/opencv/opencv_contrib.git && \
    cd opencv && \
    mkdir build && \
    cd build && \
    cmake \
	-D WITH_VTK=OFF \
	-D BUILD_opencv_viz=OFF \
	-D WITH_GTK=OFF \
	-D WITH_CUDA=ON \
	-D WITH_CUDNN=ON \
	-D CUDA_ARCH_BIN="5.3,6.2,7.2" \
	-D CUDA_ARCH_PTX="" \
	-D WITH_LIBV4L=ON \
	-D BUILD_opencv_python2=OFF \
	-D BUILD_opencv_python3=ON \
	-D BUILD_TESTS=OFF \
	-D BUILD_PERF_TESTS=OFF \
	-D CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-10.2 \
	-D CMAKE_BUILD_TYPE=RELEASE \
	-D CMAKE_INSTALL_PREFIX=/usr/ \
	-D PYTHON3_PACKAGES_PATH=/usr/lib/python3/dist-packages \
	-D WITH_V4L=ON \
	-D WITH_QT=OFF \
	-D WITH_OPENGL=ON \
	-D WITH_GSTREAMER=ON \
	-D OPENCV_GENERATE_PKGCONFIG=ON \
	-D OPENCV_ENABLE_NONFREE=ON \
	-D OPENCV_EXTRA_MODULES_PATH=/opt/opencv_contrib/modules \
	-D INSTALL_PYTHON_EXAMPLES=OFF \
	-D INSTALL_C_EXAMPLES=OFF \
	-D BUILD_EXAMPLES=OFF .. && \
   make -j1 && \
   make install

# Source: https://github.com/mdegans/nano_build_opencv/blob/docker/Dockerfile
# note: 8 jobs will fail on Nano. Try 1 instead.
# ALternatively, Install from Ubuntu Repository
###
#RUN apt-get update -y || true && \
#	DEBIAN_FRONTEND=noninteractive apt-get install -y   && \
#	apt-get install -y --no-install-recommends libopencv-dev && \
#   rm -rf /var/lib/apt/lists/* && apt autoremove && apt clean
###

WORKDIR /

CMD ["bash"]
 